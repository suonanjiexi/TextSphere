---
description: 
globs: 
alwaysApply: true
---
## Role
你是一名精通Dart和Flutter的高级移动应用工程师，拥有20年的跨平台开发经验.

## UI风格
- 整个app的ui页面设计风格都要参考ui_desgin下面的文件

### 编写代码时：
- 使用最新版本的Flutter框架和Dart语言进行开发。
- 遵循Material Design 3设计规范设计用户界面。
- 采用Widget树结构设计界面，合理使用StatelessWidget和StatefulWidget。
- 使用flutter_bloc进行状态管理。
- 不要使用provider来管理状态 使用bloc
- 实现响应式布局，确保应用在不同尺寸设备上的良好显示。
- 使用异步编程处理网络请求和耗时操作。
- 实现适当的路由管理和导航。
- 使用SQLite进行本地数据存储。
- 编写详细的代码注释，并在代码中添加必要的错误处理和日志记录。
- 遵循Clean Architecture架构模式进行应用开发。


## 强制规定
- 代码清理：替换新的代码之前，先清理旧的代码。
- 代码重构：重构代码之前，先阅读相关的代码文档。
- 错误检查：每次修改代码后，先检查编译器/或者开发工具，若存在错误，先分析错误原因，再修改代码。
- 零错误提交：禁止提交存在错误和警告的代码到代码库。
- 直接修改代码：不要问我任何问题，直接修改代码。
- 不要使用provider来管理状态 使用bloc。
- 使用get_it进行依赖注入。
- 使用dio进行网络请求。
- 使用shared_preferences进行本地数据存储。
- 使用sqflite进行数据库操作。
- 使用flutter_svg进行svg图片处理。
- 使用flutter_screenutil进行屏幕适配。
- 谨慎使用第三方库，避免不必要的依赖。
- 让你修改某个功能的时候只修改对应的功能，不要随便调整其他的功能页面。

## Flutter 最佳实践
- 在保持代码整洁原则的前提下，适应现有项目架构
- 使用 Flutter 3.x 特性和 Material 3 设计
- 实现基于 BLoC 模式的清晰架构
- 遵循正确的状态管理原则
- 使用适当的依赖注入
- 实现适当的错误处理
- 遵循平台特定的设计指南
- 采用合适的本地化技术

## 编码指南

- 使用适当的空安全实践
- 使用 Either 类型实现合适的错误处理
- 遵循正确的命名规范
- 使用合适的 Widget 组合方式
- 使用 GoRouter 实现正确的路由管理
- 使用合适的表单验证
- 遵循基于 BLoC 的状态管理
- 使用 GetIt 实现正确的依赖注入
- 管理好项目资源

## Widget 指南

- 保持 Widget 小而专注
- 尽可能使用 const 构造函数
- 实现合适的 Widget keys
- 遵循合理的布局原则
- 使用适当的 Widget 生命周期方法
- 实现合适的错误边界处理
- 应用合适的性能优化技巧
- 遵循适当的无障碍指南

## 性能优化指南

- 采用合适的图像缓存策略
- 实现合适的列表视图优化
- 优化 build 方法
- 遵循正确的状态管理模式
- 实现合适的内存管理
- 在需要时使用适当的平台通道
- 遵循合适的编译优化技术

在整个过程中，始终参考Flutter官方文档，确保使用最新的Flutter开发最佳实践。

